{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AnaisM\\\\Documents\\\\UPSSITECH\\\\3A\\\\PGE\\\\IHM\\\\IHM\\\\ihm_pge\\\\src\\\\components\\\\ConnexionScreen.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/ConnexionScreen.css';\nimport React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { useAppContextWrongID } from \"../lib/contextLibWrongID\";\nimport { useAppContextAuth } from \"../lib/contextLibAuth\";\nimport logo_usr from '../assets/logo_usr.png';\nimport { Text, Linking } from 'react-native';\nimport Popup from './PopUpMDP';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ConnexionScreen(props) {\n  _s();\n\n  //Gestion de la pop-up MDP oublié\n  const [isOpen, setIsOpen] = useState(false);\n\n  const togglePopup = () => {\n    setIsOpen(!isOpen);\n    setEmail(\"\");\n  };\n\n  const [userID, setUserID] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const {\n    userHasAuthenticated\n  } = useAppContextAuth();\n  const {\n    userHasFailed\n  } = useAppContextWrongID();\n  const [email, setEmail] = useState(\"\");\n\n  function validateForm() {\n    return userID.length > 0 && password.length > 0;\n  }\n\n  function validateMail() {\n    return email.length > 0 && email.includes(\"@\") && email.includes(\".\");\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (userID === \"user\" && password === \"eXcent\") {\n      //TODO à changer\n      userHasAuthenticated(true);\n    } else {\n      userHasFailed(true);\n    }\n\n    setUserID(\"\");\n    setPassword(\"\");\n  }\n\n  function handleSubmitMail(event) {\n    event.preventDefault();\n    userHasFailed(false);\n    userHasAuthenticated(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo_usr,\n      alt: \"logo utilisateur\",\n      className: \"logo-usr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"pge-id-title\",\n      children: \"Identification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pge-id-champ\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        className: \"login\",\n        autocomplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          size: \"lg\",\n          controlId: \"userID\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"label\",\n            children: \"Nom d'utilisateur :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            autoFocus: true,\n            type: \"userID\",\n            value: userID,\n            onChange: e => setUserID(e.target.value),\n            className: props.failed ? \"input-box-fail\" : \"input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          size: \"lg\",\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            className: \"label\",\n            children: \"Mot de passe :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            className: props.failed ? \"input-box-fail\" : \"input-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lineCo\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"forgotten-mdp\",\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              style: {\n                color: 'blue'\n              },\n              onPress: togglePopup,\n              children: \"Mot de passe oubli\\xE9 ?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this), isOpen && /*#__PURE__*/_jsxDEV(Popup, {\n            content: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"popup-title\",\n                children: \"Mot de passe oubli\\xE9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: handleSubmitMail,\n                className: \"mail-form\",\n                autocomplete: \"off\",\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  size: \"lg\",\n                  controlId: \"email\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    className: \"label-mail\",\n                    children: \"Adresse e-mail :\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    autoFocus: true,\n                    type: \"email\",\n                    value: email,\n                    onChange: e => setEmail(e.target.value),\n                    className: \"textZone\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                block: true,\n                size: \"lg\",\n                type: \"submit\",\n                disabled: !validateMail(),\n                className: \"valider-button\",\n                onClick: togglePopup,\n                children: \"Confirmer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true),\n            handleClose: togglePopup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            block: true,\n            size: \"lg\",\n            type: \"submit\",\n            disabled: !validateForm(),\n            className: \"input-button\",\n            children: \"Se connecter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), props.failed ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info-erreur\",\n          children: \"Identifiant(s) erron\\xE9(s).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 84\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConnexionScreen, \"34T83BA9zI9KCN9VZykm3VNILGY=\", false, function () {\n  return [useAppContextAuth, useAppContextWrongID];\n});\n\n_c = ConnexionScreen;\nexport default ConnexionScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnexionScreen\");","map":{"version":3,"sources":["C:/Users/AnaisM/Documents/UPSSITECH/3A/PGE/IHM/IHM/ihm_pge/src/components/ConnexionScreen.js"],"names":["React","useState","Form","Button","useAppContextWrongID","useAppContextAuth","logo_usr","Text","Linking","Popup","ConnexionScreen","props","isOpen","setIsOpen","togglePopup","setEmail","userID","setUserID","password","setPassword","userHasAuthenticated","userHasFailed","email","validateForm","length","validateMail","includes","handleSubmit","event","preventDefault","handleSubmitMail","e","target","value","failed","color"],"mappings":"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","sourcesContent":["import '../styles/ConnexionScreen.css'\r\nimport React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useAppContextWrongID } from \"../lib/contextLibWrongID\";\r\nimport { useAppContextAuth } from \"../lib/contextLibAuth\";\r\nimport logo_usr from '../assets/logo_usr.png'\r\nimport { Text, Linking } from 'react-native'\r\nimport Popup from './PopUpMDP'\r\n\r\n\r\nfunction ConnexionScreen(props) {\r\n\r\n    //Gestion de la pop-up MDP oublié\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const togglePopup = () => {\r\n        setIsOpen(!isOpen);\r\n        setEmail(\"\");\r\n    }\r\n\r\n    const [userID, setUserID] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const { userHasAuthenticated } = useAppContextAuth();\r\n    const { userHasFailed } = useAppContextWrongID();\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    function validateForm() { \r\n        return userID.length > 0 && password.length > 0;\r\n    }\r\n\r\n    function validateMail() {\r\n        return email.length > 0 && email.includes(\"@\") && email.includes(\".\");\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (userID === \"user\" && password === \"eXcent\") { //TODO à changer\r\n            userHasAuthenticated(true);\r\n        } else {\r\n            userHasFailed(true);\r\n        }\r\n        setUserID(\"\");\r\n        setPassword(\"\");\r\n    }\r\n\r\n    function handleSubmitMail(event) {\r\n        event.preventDefault();\r\n        userHasFailed(false);\r\n        userHasAuthenticated(false);\r\n    }\r\n\r\n\r\n    return (\r\n    <div>\r\n        <img src={logo_usr} alt='logo utilisateur' className='logo-usr' />\r\n        <h2 className='pge-id-title'>Identification</h2>\r\n        <div className='pge-id-champ'>\r\n                <Form onSubmit={handleSubmit} className=\"login\" autocomplete=\"off\">\r\n                <Form.Group size=\"lg\" controlId=\"userID\">\r\n                    <Form.Label className=\"label\">Nom d'utilisateur :</Form.Label>\r\n                    <Form.Control\r\n                        autoFocus\r\n                        type=\"userID\"\r\n                        value={userID}\r\n                        onChange={(e) => setUserID(e.target.value)}\r\n                        className={props.failed ? \"input-box-fail\" : \"input-box\"}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group size=\"lg\" controlId=\"password\">\r\n                    <Form.Label className=\"label\">Mot de passe :</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        className={props.failed ? \"input-box-fail\" : \"input-box\"}\r\n                    />\r\n                </Form.Group>\r\n                <div className=\"lineCo\">\r\n                    <span className='forgotten-mdp'><Text style={{ color: 'blue' }} onPress={togglePopup}>Mot de passe oublié ?</Text></span>\r\n                        {isOpen && <Popup\r\n                            content={<>\r\n                                <h3 className=\"popup-title\">Mot de passe oublié</h3>\r\n                                <Form onSubmit={handleSubmitMail} className=\"mail-form\" autocomplete=\"off\">\r\n                                    <Form.Group size=\"lg\" controlId=\"email\">\r\n                                        <Form.Label className=\"label-mail\">Adresse e-mail :</Form.Label>\r\n                                        <Form.Control\r\n                                            autoFocus\r\n                                            type=\"email\"\r\n                                            value={email}\r\n                                            onChange={(e) => setEmail(e.target.value)}\r\n                                            className=\"textZone\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Form>\r\n                                <Button block size=\"lg\" type=\"submit\" disabled={!validateMail()} className=\"valider-button\" onClick={togglePopup}>\r\n                                    Confirmer\r\n                                </Button>\r\n                            </>}\r\n                            handleClose={togglePopup}\r\n                        />}\r\n                    <Button block size=\"lg\" type=\"submit\" disabled={!validateForm()} className=\"input-button\">\r\n                        Se connecter\r\n                    </Button>\r\n                </div>\r\n                {props.failed ? \r\n                    <div className='info-erreur'>Identifiant(s) erroné(s).</div> : <div></div>}\r\n                    \r\n            </Form>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ConnexionScreen"]},"metadata":{},"sourceType":"module"}